/**
 * J2D (jQuery Canvas Graphic Engine plugin)
 *
 * @authors DeVinterX, Skaner(j2Ds)
 * @license BSD
 * @version 0.2.0-dev
 */

if (typeof define !== 'function' || define.amd) window.J2D = true;

'use strict';

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define('jquery.j2d', ['module', 'exports', 'jquery'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports, require('jquery'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports, global.jquery);
        global.jqueryJ2d = mod.exports;
    }
})(this, function (module, exports, _jquery) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _jquery2 = _interopRequireDefault(_jquery);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var defaults = {
        id: undefined,
        io: undefined,
        deltaTime: 0,
        pause: false,
        ready: false,
        frameLimit: 60,
        smoothing: true,
        webGL: false
    };

    var J2D = function J2D() {
        _classCallCheck(this, J2D);
    };

    exports.default = J2D;

    J2D.initPlugin = function () {
        if (window.j2dPlugin !== undefined) return null;
        window.j2dPlugin = {
            pluginInit: true
        };

        _jquery2.default.fn.j2d = function (options) {
            this.filter('div.canvas:not([guid])').each(function () {
                var options = _jquery2.default.extend(true, {}, defaults, options);

                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0,
                        v = c == 'x' ? r : r & 0x3 | 0x8;
                    return v.toString(16);
                });
                (0, _jquery2.default)(this).attr('guid', guid);
                var id = (0, _jquery2.default)(this).attr('id');

                if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) || id === false) {
                    (0, _jquery2.default)(this).attr('id', guid);
                }

                var tabIndex = (0, _jquery2.default)(this).attr('tabindex');

                if ((typeof tabIndex === 'undefined' ? 'undefined' : _typeof(tabIndex)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) || tabIndex === false) {
                    (0, _jquery2.default)(this).attr('tabindex', '-1');
                }

                (0, _jquery2.default)(this).data('j2d', new J2D(guid, (0, _jquery2.default)(this), options)).addClass('j2d');
                (0, _jquery2.default)(this).click().focus();
            });
            var $array = [];
            this.filter('div.canvas[guid]').each(function () {
                $array.push((0, _jquery2.default)(this).data('j2d'));
            });

            if (1 === $array.length) {
                return (0, _jquery2.default)(this).data('j2d');
            } else {
                return $array;
            }
        };

        var isFullScreen = function isFullScreen() {
            return !!(document.webkitFullscreenElement || document.webkitCurrentFullScreenElement || document.mozFullScreenElement || document.msFullscreenElement);
        };

        (0, _jquery2.default)(document).on('fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange', function (e) {
            var fullScreen = isFullScreen();

            if (!fullScreen) {
                (0, _jquery2.default)('div.canvas[guid].active').data('j2d').scene.resizeToFullPage(fullScreen);
                (0, _jquery2.default)('div.canvas[guid]:not(.active)').toggle(!fullScreen);
            }
        });
        (0, _jquery2.default)(document).on('click', 'div.canvas[guid].pause', function () {
            (0, _jquery2.default)(this).data('j2d').resume();
            var current = this;
            (0, _jquery2.default)('div.canvas[guid]:not(.pause-disable):not(:focus)').each(function () {
                if (current !== this) (0, _jquery2.default)(this).removeClass('active').data('j2d').pause();
            });
            (0, _jquery2.default)('div.canvas[guid].active.pause-disable:not(:focus)').each(function () {
                if (current !== this) (0, _jquery2.default)(this).removeClass('active');
            });
        });
        (0, _jquery2.default)(document).on('click touch mouseenter', 'div.canvas[guid]:not(.resume-by-click):not(:focus)', function (e) {
            (0, _jquery2.default)(this).addClass('active').focus().data('j2d').resume();
            var current = this;
            (0, _jquery2.default)('div.canvas[guid]:not(.pause-disable):not(:focus)').each(function () {
                if (current !== this) (0, _jquery2.default)(this).removeClass('active').data('j2d').pause();
            });
            (0, _jquery2.default)('div.canvas[guid].active.pause-disable:not(:focus)').each(function () {
                if (current !== this) (0, _jquery2.default)(this).removeClass('active');
            });
        });
        (0, _jquery2.default)(window).on('focus', function () {
            (0, _jquery2.default)('div.canvas[guid].active').each(function () {
                (0, _jquery2.default)(this).data('j2d').resume();
            });
        }).on('blur', function () {
            (0, _jquery2.default)('div.canvas[guid]').each(function () {
                (0, _jquery2.default)(this).data('j2d').pause();
            });
        });
        (0, _jquery2.default)(window).on('resize', function () {
            (0, _jquery2.default)('div.canvas[guid]').each(function () {
                (0, _jquery2.default)(this).data('j2d').device.resize();
            });
            var fullScreen = isFullScreen();

            if (fullScreen) {
                (0, _jquery2.default)('div.canvas[guid].active').data('j2d').scene.resizeToFullPage(fullScreen);
            }
        });
        FrameManager.pulse();
    };

    window.J2D = window.J2D === undefined ? J2D : undefined;
    module.exports = exports['default'];
});
"use strict";

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define("jquery.j2d", ["module", "exports", "jquery", "Vector2dInteger"], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports, require("jquery"), require("Vector2dInteger"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports, global.jquery, global.Vector2dInteger);
        global.jqueryJ2d = mod.exports;
    }
})(this, function (module, exports, _jquery, _Vector2dInteger) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _jquery2 = _interopRequireDefault(_jquery);

    var _Vector2dInteger2 = _interopRequireDefault(_Vector2dInteger);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var DeviceUtil = function () {
        function DeviceUtil() {
            _classCallCheck(this, DeviceUtil);

            this.width = parseInt((0, _jquery2.default)(document).width()) < parseInt(screen.width) ? parseInt((0, _jquery2.default)(document).width()) : parseInt(screen.width);
            this.height = parseInt((0, _jquery2.default)(document).height()) < parseInt(screen.height) ? parseInt((0, _jquery2.default)(document).height()) : parseInt(screen.height);
        }

        _createClass(DeviceUtil, [{
            key: "resize",
            value: function resize() {
                this.width = window.innerWidth;
                this.height = window.innerHeight;
            }
        }, {
            key: "getWidth",
            value: function getWidth() {
                return this.width;
            }
        }, {
            key: "getHeight",
            value: function getHeight() {
                return this.height;
            }
        }, {
            key: "getSize",
            value: function getSize() {
                return new Vector2d(this.width, this.height);
            }
        }]);

        return DeviceUtil;
    }();

    exports.default = DeviceUtil;
    if (window.J2D === undefined) window.DeviceUtil = DeviceUtil;
    module.exports = exports['default'];
});
'use strict';

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define('jquery.j2d', ['module', 'exports'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports);
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports);
        global.jqueryJ2d = mod.exports;
    }
})(this, function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var MathUtil = function () {
        function MathUtil() {
            _classCallCheck(this, MathUtil);
        }

        _createClass(MathUtil, null, [{
            key: 'number2Integer',
            value: function number2Integer(number) {
                return number >> 0;
            }
        }, {
            key: 'randomColor',
            value: function randomColor(min, max, opacity) {
                return 'rgba(' + MathUtil.random(min, max) + ', ' + MathUtil.random(min, max) + ', ' + MathUtil.random(min, max) + ', ' + opacity + ')';
            }
        }, {
            key: 'random',
            value: function random(min, max, omitZero) {
                var random = Math.floor(Math.random() * (max - min + 1) + min);
                return omitZero && random == 0 ? MathUtil.random(min, max, omitZero) : random;
            }
        }, {
            key: 'degree2Radian',
            value: function degree2Radian(degree) {
                return degree * (Math.PI / 180);
            }
        }]);

        return MathUtil;
    }();

    exports.default = MathUtil;
    if (window.J2D === undefined) window.MathUtil = MathUtil;
    module.exports = exports['default'];
});
"use strict";

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define("jquery.j2d", ["module", "exports"], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports);
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports);
        global.jqueryJ2d = mod.exports;
    }
})(this, function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var Vector2d = function () {
        function Vector2d(x, y) {
            _classCallCheck(this, Vector2d);

            this.x = x + 0.0;
            this.y = y + 0.0;
        }

        _createClass(Vector2d, [{
            key: "getX",
            value: function getX() {
                return this.x;
            }
        }, {
            key: "getY",
            value: function getY() {
                return this.y;
            }
        }, {
            key: "getCoordinates",
            value: function getCoordinates() {
                return this;
            }
        }, {
            key: "toArray",
            value: function toArray() {
                return [this.x, this.y];
            }
        }, {
            key: "fromArray",
            value: function fromArray(array) {
                this.x = array[0] + 0.0;
                this.y = array[1] + 0.0;
                return this;
            }
        }, {
            key: "toString",
            value: function toString() {
                return "(" + this.x + "," + this.y + ")";
            }
        }]);

        return Vector2d;
    }();

    exports.default = Vector2d;
    if (window.J2D === undefined) window.Vector2d = Vector2d;
    module.exports = exports['default'];
});
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define("jquery.j2d", ["module", "exports", "Vector2d"], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports, require("Vector2d"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports, global.Vector2d);
        global.jqueryJ2d = mod.exports;
    }
})(this, function (module, exports, _Vector2d2) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _Vector2d3 = _interopRequireDefault(_Vector2d2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Vector2dInteger = function (_Vector2d) {
        _inherits(Vector2dInteger, _Vector2d);

        function Vector2dInteger(x, y) {
            _classCallCheck(this, Vector2dInteger);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(Vector2dInteger).call(this, x >> 0, y >> 0));
        }

        _createClass(Vector2dInteger, [{
            key: "fromArray",
            value: function fromArray(array) {
                this.x = array[0] >> 0;
                this.y = array[1] >> 0;
                return this;
            }
        }]);

        return Vector2dInteger;
    }(_Vector2d3.default);

    exports.default = Vector2dInteger;
    if (window.J2D === undefined) window.Vector2dInteger = Vector2dInteger;
    module.exports = exports['default'];
});
//# sourceMappingURL=jquery.j2d.min.map
