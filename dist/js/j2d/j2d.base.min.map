{"version":3,"sources":["j2d/j2d.base.js"],"names":["define","J2D","Scene","prototype","addBaseNode","position","size","BaseNode","this","parent","j2d","layer","scene","options","visible","alpha","angle","box","offset","x","y","mergeOptions","data","undefined","i","hasOwnProperty","constructor","Object","e","saveJSON","JSON","stringify","loadJSON","json","resizeBox","setLayer","layers","getLayer","setVisible","isVisible","setAlpha","getAlpha","moveTo","to","t","move","vector","vec2df","getPosition","setPosition","Math","ceil","setSize","getSize","setParent","id","getDistance","sqrt","pow","getDistanceXY","abs","isIntersect","pos","x1","x2","y1","y2","isCollision","result","isLookScene","yes","viewport","width","height","turn","setRotation","getRotation","isOutScene","all","moveDir","speed","cos","math","rad","sin","drawBox","context","save","translate","rotate","lineWidth","strokeStyle","lineCap","beginPath","rect","stroke","restore"],"mappings":"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","file":"j2d/j2d.base.min","sourcesContent":["/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.5a\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\ndefine('j2d.base', [\r\n    'jquery.j2d', 'j2d.scene'\r\n], function (J2D, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addBaseNode) {\r\n        Scene.prototype.addBaseNode = function (position, size) {\r\n            return new BaseNode(this.parent, position, size);\r\n        };\r\n    }\r\n\r\n    var BaseNode = function (j2d, position, size) {\r\n        this.j2d = j2d;\r\n        this.layer = j2d.scene;\r\n\r\n        this.options = {\r\n            visible: true,\r\n            alpha: 1,\r\n            position: position,\r\n            size: size,\r\n            parent: false,\r\n            angle: 0,\r\n            box: {\r\n                offset: {\r\n                    x: 0,\r\n                    y: 0\r\n                },\r\n                size: {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    BaseNode.prototype.mergeOptions = function (data, options) {\r\n        if (options === undefined) options = this.options;\r\n        for (var i in data) {\r\n            if (data.hasOwnProperty(i)) {\r\n                try {\r\n                    if (data[i].constructor == Object) {\r\n                        options[i] = this.mergeOptions(data[i], options[i]);\r\n                    } else options[i] = data[i];\r\n                } catch (e) {\r\n                    options[i] = data[i];\r\n                }\r\n            }\r\n        }\r\n        return options;\r\n    };\r\n\r\n    BaseNode.prototype.saveJSON = function () {\r\n        JSON.stringify({\r\n            data: this.options\r\n        });\r\n    };\r\n\r\n    BaseNode.prototype.loadJSON = function (json) {\r\n        //this.options = JSON.parse(json);\r\n    };\r\n\r\n    BaseNode.prototype.resizeBox = function (offset, size) {\r\n        this.options.box.offset = offset;\r\n        this.options.box.size = size;\r\n    };\r\n\r\n    BaseNode.prototype.setLayer = function (layer) {\r\n        this.layer = layer ? this.j2d.layers.getLayer(layer) : this.j2d.scene;\r\n    };\r\n\r\n    BaseNode.prototype.getLayer = function () {\r\n        return this.layer;\r\n    };\r\n\r\n    BaseNode.prototype.setVisible = function (visible) {\r\n        this.options.visible = visible;\r\n    };\r\n\r\n    BaseNode.prototype.isVisible = function () {\r\n        return this.options.visible;\r\n    };\r\n\r\n    BaseNode.prototype.setAlpha = function (alpha) {\r\n        if (alpha < 0) alpha = 0;\r\n        if (alpha > 1) alpha = 1;\r\n        this.options.alpha = alpha;\r\n    };\r\n\r\n    BaseNode.prototype.getAlpha = function (alpha) {\r\n        return this.options.alpha;\r\n    };\r\n\r\n    BaseNode.prototype.moveTo = function (to, t) {\r\n        t = t ? t : 1;\r\n        this.move(this.j2d.vector.vec2df(\r\n            ((to.x - this.getPosition().x) / t),\r\n            ((to.y - this.getPosition().y) / t)\r\n        ));\r\n    };\r\n\r\n    BaseNode.prototype.setPosition = function (position) {\r\n        this.options.position = this.j2d.vector.vec2df(\r\n            position.x - Math.ceil(this.options.size.x / 2),\r\n            position.y - Math.ceil(this.options.size.y / 2)\r\n        );\r\n    };\r\n\r\n    BaseNode.prototype.move = function (position) {\r\n        this.options.position.x += position.x;\r\n        this.options.position.y += position.y;\r\n    };\r\n\r\n    BaseNode.prototype.getPosition = function () {\r\n        return this.j2d.vector.vec2df(\r\n            this.options.position.x + Math.ceil(this.options.size.x / 2),\r\n            this.options.position.y + Math.ceil(this.options.size.y / 2)\r\n        );\r\n    };\r\n\r\n    BaseNode.prototype.setSize = function (size) {\r\n        this.options.size = size;\r\n    };\r\n\r\n    BaseNode.prototype.getSize = function () {\r\n        return this.options.size;\r\n    };\r\n\r\n    BaseNode.prototype.setParent = function (id) {\r\n        this.parent = id;\r\n    };\r\n\r\n    BaseNode.prototype.getDistance = function (id) {\r\n        return Math.ceil(Math.sqrt(\r\n                Math.pow(id.getPosition().x - this.getPosition().x, 2) +\r\n                Math.pow(id.getPosition().y - this.getPosition().y, 2)\r\n            )\r\n        );\r\n    };\r\n\r\n    BaseNode.prototype.getDistanceXY = function (id) {\r\n        return this.j2d.vector.vec2df(\r\n            Math.abs(id.getPosition().x - this.getPosition().x),\r\n            Math.abs(id.getPosition().y - this.getPosition().y)\r\n        );\r\n    };\r\n\r\n    BaseNode.prototype.isIntersect = function (id) {\r\n        var pos = {\r\n            x1: this.options.position.x + this.options.box.offset.x,\r\n            x2: id.options.position.x + id.options.box.offset.x,\r\n            y1: this.options.position.y + this.options.box.offset.y,\r\n            y2: id.options.position.y + id.options.box.offset.y\r\n        };\r\n\r\n        var size = {\r\n            x1: this.options.size.x + this.options.box.size.x,\r\n            x2: id.options.size.x + id.options.box.size.x,\r\n            y1: this.options.size.y + this.options.box.size.y,\r\n            y2: id.options.size.y + id.options.box.size.y\r\n        };\r\n\r\n        return (\r\n            (pos.y1 + size.y1 >= pos.y2) &&\r\n            (pos.x1 + size.x1 >= pos.x2)\r\n            ) && (\r\n            (pos.x1 < pos.x2 + size.x2) &&\r\n            (pos.y1 < pos.y2 + size.y2)\r\n            );\r\n    };\r\n\r\n    BaseNode.prototype.isCollision = function (id) {\r\n        var result = false;\r\n        if (\r\n            (this.getDistanceXY(id).x < (this.options.size.x / 2 + id.options.size.x / 2)) &&\r\n            (this.getDistanceXY(id).y < (this.options.size.y / 2 + id.options.size.y / 2))\r\n        ) {\r\n            result = true;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    BaseNode.prototype.isLookScene = function () {\r\n        var yes = true;\r\n        if (\r\n            (this.options.position.x > this.j2d.scene.viewport.x + this.j2d.scene.width ||\r\n            this.options.position.x + this.options.size.x < this.j2d.scene.viewport.x) ||\r\n            (this.options.position.y > this.j2d.scene.viewport.y + this.j2d.scene.height ||\r\n            this.options.position.y + this.options.size.y < this.j2d.scene.viewport.y)\r\n        ) {\r\n            yes = false;\r\n        }\r\n        return yes;\r\n    };\r\n\r\n    BaseNode.prototype.turn = function (angle) {\r\n        this.options.angle = (this.options.angle % 360);\r\n        this.options.angle += angle;\r\n    };\r\n\r\n    BaseNode.prototype.setRotation = function (angle) {\r\n        this.options.angle = angle % 360;\r\n    };\r\n\r\n    BaseNode.prototype.getRotation = function (angle) {\r\n        return this.options.angle;\r\n    };\r\n\r\n    BaseNode.prototype.isOutScene = function () {\r\n        return {\r\n            x: (this.options.position.x + this.options.size.x >= this.j2d.scene.viewport.x + this.j2d.scene.width)\r\n                ? 1 : ((this.options.position.x <= this.j2d.scene.viewport.x) ? -1 : 0),\r\n            y: (this.options.position.y + this.options.size.y >= this.j2d.scene.viewport.y + this.j2d.scene.height)\r\n                ? 1 : ((this.options.position.y <= this.j2d.scene.viewport.y) ? -1 : 0),\r\n            all: (this.x || this.y)\r\n        };\r\n    };\r\n\r\n    BaseNode.prototype.moveDir = function (speed) {\r\n        this.options.position.x += speed * (Math.cos(this.j2d.math.rad(this.options.angle)));\r\n        this.options.position.y += speed * (Math.sin(this.j2d.math.rad(this.options.angle)));\r\n    };\r\n\r\n    BaseNode.prototype.drawBox = function () {\r\n        var context = this.layer.context;\r\n\r\n        if (this.options.angle) {\r\n            context.save();\r\n            context.translate(this.getPosition().x - this.j2d.scene.viewport.x, this.getPosition().y - this.j2d.scene.viewport.y);\r\n            context.rotate(this.j2d.math.rad(this.options.angle));\r\n            context.translate(-(this.getPosition().x - this.j2d.scene.viewport.x), -(this.getPosition().y - this.j2d.scene.viewport.y));\r\n        }\r\n\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = 'black';\r\n        context.lineCap = 'round';\r\n        context.beginPath();\r\n\r\n        context.rect(\r\n            this.options.position.x - this.j2d.scene.viewport.x,\r\n            this.options.position.y - this.j2d.scene.viewport.y,\r\n            this.options.size.x, this.options.size.y);\r\n        context.stroke();\r\n\r\n        context.strokeStyle = 'yellow';\r\n\r\n        context.beginPath();\r\n        context.rect(\r\n            this.options.box.offset.x + this.options.position.x - this.j2d.scene.viewport.x,\r\n            this.options.box.offset.y + this.options.position.y - this.j2d.scene.viewport.y,\r\n            this.options.box.size.x + this.options.size.x,\r\n            this.options.box.size.y + this.options.size.y\r\n        );\r\n        context.stroke();\r\n\r\n        context.lineCap = 'butt';\r\n        if (this.options.angle) {\r\n            context.restore();\r\n        }\r\n    };\r\n\r\n    return BaseNode;\r\n});\r\n"],"sourceRoot":"/source/"}