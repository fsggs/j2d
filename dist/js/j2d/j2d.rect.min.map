{"version":3,"sources":["j2d/j2d.rect.js"],"names":["define","J2D","BaseNode","Scene","prototype","addRectNode","pos","size","color","RectNode","this","parent","j2d","call","Object","create","constructor","draw","context","layer","visible","isLookScene","alpha","tmpAlpha","globalAlpha","angle","save","translate","getPosition","x","scene","viewport","y","rotate","math","rad","fillStyle","lineWidth","fillRect","restore"],"mappings":"AASAA,OAAO,YACH,aACA,WACA,aACD,SAAUC,EAAKC,EAAUC,GACxB,YAEKA,GAAMC,UAAUC,cACjBF,EAAMC,UAAUC,YAAc,SAAUC,EAAKC,EAAMC,GAC/C,MAAO,IAAIC,GAASC,KAAKC,OAAQL,EAAKC,EAAMC,IAIpD,IAAIC,GAAW,SAAUG,EAAKN,EAAKC,EAAMC,GAErCN,EAASW,KAAKH,KAAME,EAAKN,EAAKC,GAE9BG,KAAKF,MAAQA,EAwCjB,OArCAC,GAASL,UAAYU,OAAOC,OAAOb,EAASE,WAC5CK,EAASL,UAAUY,YAAcP,EAEjCA,EAASL,UAAUa,KAAO,WACtB,GAAIC,GAAUR,KAAKS,MAAMD,OACzB,IAAIR,KAAKU,SAAWV,KAAKW,cAAe,CAEpC,GAAkB,GAAdX,KAAKY,MAAY,CACjB,GAAIC,GAAWL,EAAQM,WACvBN,GAAQM,YAAcd,KAAKY,MAG3BZ,KAAKe,QACLP,EAAQQ,OACRR,EAAQS,UAAUjB,KAAKkB,cAAcC,EAAInB,KAAKE,IAAIkB,MAAMC,SAASF,EAAGnB,KAAKkB,cAAcI,EAAItB,KAAKE,IAAIkB,MAAMC,SAASC,GACnHd,EAAQe,OAAOvB,KAAKE,IAAIsB,KAAKC,IAAIzB,KAAKe,QACtCP,EAAQS,YAAYjB,KAAKkB,cAAcC,EAAInB,KAAKE,IAAIkB,MAAMC,SAASF,KAAMnB,KAAKkB,cAAcI,EAAItB,KAAKE,IAAIkB,MAAMC,SAASC,KAG5Hd,EAAQkB,UAAY1B,KAAKF,MACzBU,EAAQmB,UAAY,EAEpBnB,EAAQoB,SACJ5B,KAAKJ,IAAIuB,EAAInB,KAAKE,IAAIkB,MAAMC,SAASF,EACrCnB,KAAKJ,IAAI0B,EAAItB,KAAKE,IAAIkB,MAAMC,SAASC,EACrCtB,KAAKH,KAAKsB,EAAGnB,KAAKH,KAAKyB,GAEvBtB,KAAKe,OACLP,EAAQqB,UAGM,GAAd7B,KAAKY,QACLJ,EAAQM,YAAcD,KAK3Bd","file":"j2d/j2d.rect.min","sourcesContent":["/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.4\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\ndefine('j2d.rect', [\r\n    'jquery.j2d',\r\n    'j2d.base',\r\n    'j2d.scene'\r\n], function (J2D, BaseNode, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addRectNode) {\r\n        Scene.prototype.addRectNode = function (pos, size, color) {\r\n            return new RectNode(this.parent, pos, size, color);\r\n        };\r\n    }\r\n\r\n    var RectNode = function (j2d, pos, size, color) {\r\n\r\n        BaseNode.call(this, j2d, pos, size);\r\n\r\n        this.color = color;\r\n    };\r\n\r\n    RectNode.prototype = Object.create(BaseNode.prototype);\r\n    RectNode.prototype.constructor = RectNode;\r\n\r\n    RectNode.prototype.draw = function () {\r\n        var context = this.layer.context;\r\n        if (this.visible && this.isLookScene()) {\r\n\r\n            if (this.alpha != 1) {\r\n                var tmpAlpha = context.globalAlpha;\r\n                context.globalAlpha = this.alpha;\r\n            }\r\n\r\n            if (this.angle) {\r\n                context.save();\r\n                context.translate(this.getPosition().x - this.j2d.scene.viewport.x, this.getPosition().y - this.j2d.scene.viewport.y);\r\n                context.rotate(this.j2d.math.rad(this.angle));\r\n                context.translate(-(this.getPosition().x - this.j2d.scene.viewport.x), -(this.getPosition().y - this.j2d.scene.viewport.y));\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            context.lineWidth = 0;\r\n\r\n            context.fillRect(\r\n                this.pos.x - this.j2d.scene.viewport.x,\r\n                this.pos.y - this.j2d.scene.viewport.y,\r\n                this.size.x, this.size.y);\r\n\r\n            if (this.angle) {\r\n                context.restore();\r\n            }\r\n\r\n            if (this.alpha != 1) {\r\n                context.globalAlpha = tmpAlpha;\r\n            }\r\n        }\r\n    };\r\n\r\n    return RectNode;\r\n});\r\n"],"sourceRoot":"/source/"}