{"version":3,"sources":["j2d.rect.js","j2d/j2d.rect.js"],"names":["root","factory","define","amd","J2D","BaseNode","Scene","global","prototype","addRectNode","position","size","color","RectNode","this","parent","j2d","call","nodeName","mergeOptions","Object","create","constructor","draw","context","layer","options","visible","isLookScene","alpha","tmpAlpha","globalAlpha","angle","save","translate","getPosition","x","scene","viewport","y","rotate","math","rad","fillStyle","lineWidth","fillRect","restore","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CCFC,SAAUA,EAAMC,GACS,kBAAXC,SAAyBA,OAAOC,IACvCD,OAAO,YAAa,aAAc,WAAY,aAAcD,GAE5DA,EAAQD,EAAKI,IAAKJ,EAAKK,SAAUL,EAAKM,QAE5CC,OAAQ,SAAUH,EAAKC,EAAUC,GAC/B,YAEKA,GAAME,UAAUC,cACjBH,EAAME,UAAUC,YAAc,SAAUC,EAAUC,EAAMC,GACpD,MAAO,IAAIC,GAASC,KAAKC,OAAQL,EAAUC,EAAMC,IAIzD,IAAIC,GAAW,SAAUG,EAAKN,EAAUC,EAAMC,GAC1CP,EAASY,KAAKH,KAAME,EAAKN,EAAUC,GACnCG,KAAKI,SAAW,WAChBJ,KAAKK,cACDP,MAAOA,IA0Cf,OAtCAC,GAASL,UAAYY,OAAOC,OAAOhB,EAASG,WAC5CK,EAASL,UAAUc,YAAcT,EAEjCA,EAASL,UAAUe,KAAO,WACtB,GAAIC,GAAUV,KAAKW,MAAMD,OACzB,IAAIV,KAAKY,QAAQC,SAAWb,KAAKc,cAAe,CAE5C,GAA0B,GAAtBd,KAAKY,QAAQG,MAAY,CACzB,GAAIC,GAAWN,EAAQO,WACvBP,GAAQO,YAAcjB,KAAKY,QAAQG,MAGnCf,KAAKY,QAAQM,QACbR,EAAQS,OACRT,EAAQU,UAAUpB,KAAKqB,cAAcC,EAAItB,KAAKE,IAAIqB,MAAMC,SAASF,EAAGtB,KAAKqB,cAAcI,EAAIzB,KAAKE,IAAIqB,MAAMC,SAASC,GACnHf,EAAQgB,OAAO1B,KAAKE,IAAIyB,KAAKC,IAAI5B,KAAKY,QAAQM,QAC9CR,EAAQU,YAAYpB,KAAKqB,cAAcC,EAAItB,KAAKE,IAAIqB,MAAMC,SAASF,KAAMtB,KAAKqB,cAAcI,EAAIzB,KAAKE,IAAIqB,MAAMC,SAASC,KAG5Hf,EAAQmB,UAAY7B,KAAKY,QAAQd,MACjCY,EAAQoB,UAAY,EAEpBpB,EAAQqB,SACJ/B,KAAKY,QAAQhB,SAAS0B,EAAItB,KAAKE,IAAIqB,MAAMC,SAASF,EAClDtB,KAAKY,QAAQhB,SAAS6B,EAAIzB,KAAKE,IAAIqB,MAAMC,SAASC,EAClDzB,KAAKY,QAAQf,KAAKyB,EAAGtB,KAAKY,QAAQf,KAAK4B,GAEvCzB,KAAKY,QAAQM,OACbR,EAAQsB,UAGc,GAAtBhC,KAAKY,QAAQG,QACbL,EAAQO,YAAcD,KAKfiB,SAAfxC,OAAOH,MAAmBG,OAAOM,SAAWA,GACzCA","file":"j2d/j2d.rect.js","sourcesContent":[null,"/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.5a\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\n!function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('j2d.rect', ['jquery.j2d', 'j2d.base', 'j2d.scene'], factory);\r\n    } else {\r\n        factory(root.J2D, root.BaseNode, root.Scene);\r\n    }\r\n}(global, function (J2D, BaseNode, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addRectNode) {\r\n        Scene.prototype.addRectNode = function (position, size, color) {\r\n            return new RectNode(this.parent, position, size, color);\r\n        };\r\n    }\r\n\r\n    var RectNode = function (j2d, position, size, color) {\r\n        BaseNode.call(this, j2d, position, size);\r\n        this.nodeName = 'RectNode';\r\n        this.mergeOptions({\r\n            color: color\r\n        });\r\n    };\r\n\r\n    RectNode.prototype = Object.create(BaseNode.prototype);\r\n    RectNode.prototype.constructor = RectNode;\r\n\r\n    RectNode.prototype.draw = function () {\r\n        var context = this.layer.context;\r\n        if (this.options.visible && this.isLookScene()) {\r\n\r\n            if (this.options.alpha != 1) {\r\n                var tmpAlpha = context.globalAlpha;\r\n                context.globalAlpha = this.options.alpha;\r\n            }\r\n\r\n            if (this.options.angle) {\r\n                context.save();\r\n                context.translate(this.getPosition().x - this.j2d.scene.viewport.x, this.getPosition().y - this.j2d.scene.viewport.y);\r\n                context.rotate(this.j2d.math.rad(this.options.angle));\r\n                context.translate(-(this.getPosition().x - this.j2d.scene.viewport.x), -(this.getPosition().y - this.j2d.scene.viewport.y));\r\n            }\r\n\r\n            context.fillStyle = this.options.color;\r\n            context.lineWidth = 0;\r\n\r\n            context.fillRect(\r\n                this.options.position.x - this.j2d.scene.viewport.x,\r\n                this.options.position.y - this.j2d.scene.viewport.y,\r\n                this.options.size.x, this.options.size.y);\r\n\r\n            if (this.options.angle) {\r\n                context.restore();\r\n            }\r\n\r\n            if (this.options.alpha != 1) {\r\n                context.globalAlpha = tmpAlpha;\r\n            }\r\n        }\r\n    };\r\n\r\n    if (global.J2D !== undefined) global.RectNode = RectNode;\r\n    return RectNode;\r\n});\r\n"],"sourceRoot":"/source/"}