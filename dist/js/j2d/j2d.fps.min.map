{"version":3,"sources":["j2d.fps.js","j2d/j2d.fps.js"],"names":["root","factory","define","amd","global","FPSMeter","this","tmp_of_fps","maxFPS","tmp_of_time","Date","now","prototype","start","data","frameLimit","undefined","fps","end","getFPS","J2D"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CCFC,SAAUA,EAAMC,GACS,kBAAXC,SAAyBA,OAAOC,IACvCD,OAAO,aAAeD,GAEtBA,KAENG,OAAQ,WACN,YAEA,IAAIC,GAAW,WACXC,KAAKC,WAAa,EAClBD,KAAKE,OAAS,GACdF,KAAKG,YAAcC,KAAKC,MAsB5B,OAnBAN,GAASO,UAAUC,MAAQ,SAAUC,GACjCR,KAAKE,OAASM,EAAKC,WACFC,SAAbV,KAAKW,MAAmBX,KAAKW,IAAMH,EAAKC,YAC5CT,KAAKC,YAAc,GAGvBF,EAASO,UAAUM,IAAM,SAAUJ,GAC3BA,EAAKH,IAAML,KAAKG,aAAe,MAC/BH,KAAKW,IAAMX,KAAKC,WAChBD,KAAKC,WAAa,EAClBD,KAAKG,YAAcK,EAAKH,MAIhCN,EAASO,UAAUO,OAAS,WACxB,MAAQb,MAAKW,IAAMX,KAAKE,OAAUF,KAAKE,OAASF,KAAKW,KAGtCD,SAAfZ,OAAOgB,MAAmBhB,OAAOC,SAAWA,GACzCA","file":"j2d/j2d.fps.js","sourcesContent":[null,"/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.5a\r\n * @see https://github.com/SkanerSoft/J2ds/commit/d91880bd189a29b364cc6fd2a3af069f139c5f8a\r\n */\r\n\r\n!function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('j2d.fps', [], factory);\r\n    } else {\r\n        factory();\r\n    }\r\n}(global, function () {\r\n    \"use strict\";\r\n\r\n    var FPSMeter = function () {\r\n        this.tmp_of_fps = 0;\r\n        this.maxFPS = 60;\r\n        this.tmp_of_time = Date.now();\r\n    };\r\n\r\n    FPSMeter.prototype.start = function (data) {\r\n        this.maxFPS = data.frameLimit;\r\n        if (this.fps === undefined) this.fps = data.frameLimit;\r\n        this.tmp_of_fps += 1;\r\n    };\r\n\r\n    FPSMeter.prototype.end = function (data) {\r\n        if (data.now - this.tmp_of_time >= 1000.0) {\r\n            this.fps = this.tmp_of_fps;\r\n            this.tmp_of_fps = 0;\r\n            this.tmp_of_time = data.now;\r\n        }\r\n    };\r\n\r\n    FPSMeter.prototype.getFPS = function () {\r\n        return (this.fps > this.maxFPS) ? this.maxFPS : this.fps;\r\n    };\r\n\r\n    if (global.J2D !== undefined) global.FPSMeter = FPSMeter;\r\n    return FPSMeter;\r\n});\r\n"],"sourceRoot":"/source/"}