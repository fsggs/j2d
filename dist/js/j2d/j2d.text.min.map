{"version":3,"sources":["j2d.text.js","j2d/j2d.text.js"],"names":["root","factory","define","amd","J2D","BaseNode","Scene","global","prototype","addTextNode","position","text","sizePx","color","family","width","colorL","TextNode","this","parent","j2d","call","vector","vec2df","nodeName","mergeOptions","vAlign","hAlign","box","offset","y","math","toInt","size","lineWidth","fullText","maxWidth","lines","split","options","font","scene","context","i","len","length","measureText","x","Object","create","constructor","setSize","getSize","drawSimpleText","layer","fillStyle","textAlign","textBaseline","strokeStyle","strokeText","fillText","getText","setText","draw","visible","isLookScene","alpha","tmpAlpha","globalAlpha","angle","save","translate","getPosition","viewport","rotate","rad","restore","undefined"],"mappings":"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","file":"j2d/j2d.text.js","sourcesContent":[null,"/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.5a\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\n!function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('j2d.text', ['jquery.j2d', 'j2d.base', 'j2d.scene'], factory);\r\n    } else {\r\n        factory(root.J2D, root.BaseNode, root.Scene);\r\n    }\r\n}(global, function (J2D, BaseNode, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addTextNode) {\r\n        Scene.prototype.addTextNode = function (position, text, sizePx, color, family, width, colorL) {\r\n            return new TextNode(this.parent, position, text, sizePx, color, family, width, colorL);\r\n        };\r\n    }\r\n\r\n    //TODO::\r\n    var TextNode = function (j2d, position, text, sizePx, color, family, width, colorL) {\r\n        BaseNode.call(this, j2d, position, j2d.vector.vec2df(0, 0));\r\n        this.nodeName = 'TextNode';\r\n        this.mergeOptions({\r\n            vAlign: 'top',\r\n            hAlign: 'left',\r\n            color: color ? color : 'black',\r\n\r\n            family: family ? family : 'sans-serif',\r\n            sizePx: sizePx ? sizePx : 20,\r\n\r\n            box: {\r\n                offset: {\r\n                    y: this.j2d.math.toInt(this.sizePx * 0.26)\r\n                },\r\n                size: {\r\n                    y: -this.j2d.math.toInt(this.sizePx * 0.26)\r\n                }\r\n            },\r\n            lineWidth: width ? width : 0,\r\n            colorL: colorL ? colorL : 'black',\r\n\r\n            fullText: text,\r\n            maxWidth: 0,\r\n            lines: text.split(\"\\n\")\r\n        });\r\n\r\n        /*Свойства*/\r\n        this.options.font = this.options.sizePx + 'px ' + this.options.family;\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width ?\r\n                this.j2d.scene.context.measureText(this.options.lines[i]).width :\r\n                this.options.maxWidth);\r\n        }\r\n\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype = Object.create(BaseNode.prototype);\r\n    TextNode.prototype.constructor = TextNode;\r\n\r\n    TextNode.prototype.setSize = function (sizePx) {\r\n        this.options.sizePx = sizePx;\r\n        this.options.font = this.options.sizePx + 'px ' + this.options.family;\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        this.options.box.offset.y = this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n        this.options.box.size.y = -this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                ? this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                : this.options.maxWidth\r\n            );\r\n        }\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.getSize = function () {\r\n        return this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.drawSimpleText = function (text, position, color, colorL) {\r\n        var context = this.layer.context;\r\n        context.fillStyle = color ? color : this.options.color;\r\n        context.textAlign = this.options.hAlign;\r\n        context.textBaseline = this.options.vAlign;\r\n        context.font = this.options.font;\r\n        context.lineWidth = this.options.lineWidth;\r\n        context.strokeStyle = colorL ? colorL : this.options.colorL;\r\n\r\n        var lines = text.split(\"\\n\");\r\n\r\n        position = position ? position : this.options.position;\r\n\r\n        for (var i = 0, len = lines.length; i < len; i += 1) {\r\n            if (this.options.lineWidth) {\r\n                context.strokeText(lines[i], position.x, position.y + this.options.sizePx * i);\r\n            }\r\n            context.fillText(lines[i], position.x, position.y + this.options.sizePx * i);\r\n        }\r\n        context.lineWidth = 0;\r\n        context.strokeStyle = 'black';\r\n    };\r\n\r\n    TextNode.prototype.getText = function () {\r\n        return this.options.fullText;\r\n    };\r\n\r\n    TextNode.prototype.setText = function (text) {\r\n        this.options.fullText = text;\r\n        this.options.maxWidth = 0;\r\n        this.options.lines = text.split(\"\\n\");\r\n\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        this.options.box.offset.y = this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n        this.options.box.size.y = -this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                ? this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                : this.options.maxWidth\r\n            );\r\n        }\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.draw = function () {\r\n        var context = this.layer.context;\r\n        if (this.options.visible && this.isLookScene()) {\r\n            if (this.options.alpha != 1) {\r\n                var tmpAlpha = context.globalAlpha;\r\n                context.globalAlpha = this.options.alpha;\r\n            }\r\n\r\n            if (this.options.angle) {\r\n                context.save();\r\n                context.translate(\r\n                    this.getPosition().x - this.j2d.scene.viewport.x,\r\n                    this.getPosition().y - this.j2d.scene.viewport.y\r\n                );\r\n                context.rotate(this.j2d.math.rad(this.options.angle));\r\n                context.translate(\r\n                    -(this.getPosition().x - this.j2d.scene.viewport.x),\r\n                    -(this.getPosition().y - this.j2d.scene.viewport.y)\r\n                );\r\n            }\r\n\r\n            context.fillStyle = this.options.color;\r\n            context.textAlign = this.options.hAlign;\r\n            context.textBaseline = this.options.vAlign;\r\n            context.font = this.options.font;\r\n            context.lineWidth = this.options.lineWidth;\r\n            context.strokeStyle = this.options.colorL;\r\n\r\n            for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n                if (this.options.lineWidth) {\r\n                    context.strokeText(this.options.lines[i], this.options.position.x, this.options.position.y + this.options.sizePx * i);\r\n                }\r\n                context.fillText(this.options.lines[i], this.options.position.x, this.options.position.y + this.options.sizePx * i);\r\n            }\r\n\r\n            context.lineWidth = 0;\r\n            context.strokeStyle = 'black';\r\n\r\n            if (this.options.angle) {\r\n                context.restore();\r\n            }\r\n\r\n            if (this.options.alpha != 1) {\r\n                context.globalAlpha = tmpAlpha;\r\n            }\r\n        }\r\n    };\r\n\r\n    if (global.J2D !== undefined) global.TextNode = TextNode;\r\n    return TextNode;\r\n});\r\n"],"sourceRoot":"/source/"}