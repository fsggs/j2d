{"version":3,"sources":["j2d/j2d.text.js"],"names":["define","J2D","BaseNode","Scene","prototype","addTextNode","position","text","sizePx","color","family","width","colorL","TextNode","this","parent","j2d","call","vector","vec2df","mergeOptions","vAlign","hAlign","box","offset","y","math","toInt","size","lineWidth","fullText","maxWidth","lines","split","options","font","scene","context","i","len","length","measureText","x","Object","create","constructor","setSize","getSize","drawSimpleText","layer","fillStyle","textAlign","textBaseline","strokeStyle","strokeText","fillText","getText","setText","draw","visible","isLookScene","alpha","tmpAlpha","globalAlpha","angle","save","translate","getPosition","viewport","rotate","rad","undefined","console","log","restore"],"mappings":"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","file":"j2d/j2d.text.min","sourcesContent":["/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.5a\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\ndefine('j2d.text', [\r\n    'jquery.j2d',\r\n    'j2d.base',\r\n    'j2d.scene'\r\n], function (J2D, BaseNode, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addTextNode) {\r\n        Scene.prototype.addTextNode = function (position, text, sizePx, color, family, width, colorL) {\r\n            return new TextNode(this.parent, position, text, sizePx, color, family, width, colorL);\r\n        };\r\n    }\r\n\r\n    //TODO::\r\n    var TextNode = function (j2d, position, text, sizePx, color, family, width, colorL) {\r\n        BaseNode.call(this, j2d, position, j2d.vector.vec2df(0, 0));\r\n\r\n        this.mergeOptions({\r\n            vAlign: 'top',\r\n            hAlign: 'left',\r\n            color: color ? color : 'black',\r\n\r\n            family: family ? family : 'sans-serif',\r\n            sizePx: sizePx ? sizePx : 20,\r\n\r\n            box: {\r\n                offset: {\r\n                    y: this.j2d.math.toInt(this.sizePx * 0.26)\r\n                },\r\n                size: {\r\n                    y: -this.j2d.math.toInt(this.sizePx * 0.26)\r\n                }\r\n            },\r\n            lineWidth: width ? width : 0,\r\n            colorL: colorL ? colorL : 'black',\r\n\r\n            fullText: text,\r\n            maxWidth: 0,\r\n            lines: text.split(\"\\n\")\r\n        });\r\n\r\n        /*Свойства*/\r\n        this.options.font = this.options.sizePx + 'px ' + this.options.family;\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width ?\r\n                this.j2d.scene.context.measureText(this.options.lines[i]).width :\r\n                this.options.maxWidth);\r\n        }\r\n\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype = Object.create(BaseNode.prototype);\r\n    TextNode.prototype.constructor = TextNode;\r\n\r\n    TextNode.prototype.setSize = function (sizePx) {\r\n        this.options.sizePx = sizePx;\r\n        this.options.font = this.options.sizePx + 'px ' + this.options.family;\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        this.options.box.offset.y = this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n        this.options.box.size.y = -this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                ? this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                : this.options.maxWidth\r\n            );\r\n        }\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.getSize = function () {\r\n        return this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.drawSimpleText = function (text, position, color, colorL) {\r\n        var context = this.layer.context;\r\n        context.fillStyle = color ? color : this.options.color;\r\n        context.textAlign = this.options.hAlign;\r\n        context.textBaseline = this.options.vAlign;\r\n        context.font = this.options.font;\r\n        context.lineWidth = this.options.lineWidth;\r\n        context.strokeStyle = colorL ? colorL : this.options.colorL;\r\n\r\n        var lines = text.split(\"\\n\");\r\n\r\n        position = position ? position : this.options.position;\r\n\r\n        for (var i = 0, len = lines.length; i < len; i += 1) {\r\n            if (this.options.lineWidth) {\r\n                context.strokeText(lines[i], position.x, position.y + this.options.sizePx * i);\r\n            }\r\n            context.fillText(lines[i], position.x, position.y + this.options.sizePx * i);\r\n        }\r\n        context.lineWidth = 0;\r\n        context.strokeStyle = 'black';\r\n    };\r\n\r\n    TextNode.prototype.getText = function () {\r\n        return this.options.fullText;\r\n    };\r\n\r\n    TextNode.prototype.setText = function (text) {\r\n        this.options.fullText = text;\r\n        this.options.maxWidth = 0;\r\n        this.options.lines = text.split(\"\\n\");\r\n\r\n        this.j2d.scene.context.font = this.options.font;\r\n\r\n        this.options.box.offset.y = this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n        this.options.box.size.y = -this.j2d.math.toInt(this.options.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n            this.options.maxWidth = (this.options.maxWidth < this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                ? this.j2d.scene.context.measureText(this.options.lines[i]).width\r\n                : this.options.maxWidth\r\n            );\r\n        }\r\n        this.options.size.x = this.options.maxWidth;\r\n        this.options.size.y = this.options.lines.length * this.options.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.draw = function () {\r\n        var context = this.layer.context;\r\n        if (this.options.visible && this.isLookScene()) {\r\n            if (this.options.alpha != 1) {\r\n                var tmpAlpha = context.globalAlpha;\r\n                context.globalAlpha = this.options.alpha;\r\n            }\r\n\r\n            if (this.options.angle) {\r\n                context.save();\r\n                context.translate(\r\n                    this.getPosition().x - this.j2d.scene.viewport.x,\r\n                    this.getPosition().y - this.j2d.scene.viewport.y\r\n                );\r\n                context.rotate(this.j2d.math.rad(this.options.angle));\r\n                context.translate(\r\n                    -(this.getPosition().x - this.j2d.scene.viewport.x),\r\n                    -(this.getPosition().y - this.j2d.scene.viewport.y)\r\n                );\r\n            }\r\n\r\n            context.fillStyle = this.options.color;\r\n            context.textAlign = this.options.hAlign;\r\n            context.textBaseline = this.options.vAlign;\r\n            context.font = this.options.font;\r\n            context.lineWidth = this.options.lineWidth;\r\n            context.strokeStyle = this.options.colorL;\r\n\r\n            var x;\r\n            if (x === undefined) {\r\n                console.log();\r\n                x = true;\r\n            }\r\n\r\n            for (var i = 0, len = this.options.lines.length; i < len; i += 1) {\r\n                if (this.options.lineWidth) {\r\n                    context.strokeText(this.options.lines[i], this.options.position.x, this.options.position.y + this.options.sizePx * i);\r\n                }\r\n                context.fillText(this.options.lines[i], this.options.position.x, this.options.position.y + this.options.sizePx * i);\r\n            }\r\n\r\n            context.lineWidth = 0;\r\n            context.strokeStyle = 'black';\r\n\r\n            if (this.options.angle) {\r\n                context.restore();\r\n            }\r\n\r\n            if (this.options.alpha != 1) {\r\n                context.globalAlpha = tmpAlpha;\r\n            }\r\n        }\r\n    };\r\n\r\n    return TextNode;\r\n});\r\n"],"sourceRoot":"/source/"}