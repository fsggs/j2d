{"version":3,"sources":["j2d/j2d.text.js"],"names":["define","J2D","BaseNode","Scene","prototype","addTextNode","pos","text","sizePx","color","family","width","colorL","TextNode","this","parent","j2d","call","vector","vec2df","vAlign","hAlign","box","offset","y","math","toInt","size","lineWidth","font","fullText","maxWidth","lines","split","scene","context","i","len","length","measureText","x","Object","create","constructor","setSize","getSize","drawSimpleText","layer","fillStyle","textAlign","textBaseline","strokeStyle","strokeText","fillText","getText","setText","draw","visible","isLookScene","alpha","tmpAlpha","globalAlpha","angle","save","translate","getPosition","viewport","rotate","rad","restore"],"mappings":"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","file":"j2d/j2d.text.min","sourcesContent":["/**\r\n * J2D (jQuery plugin of the fork j2ds)\r\n *\r\n * @authors Skaner, likerRr, DeVinterX\r\n * @license zlib\r\n * @version 0.1.4\r\n * @see https://github.com/SkanerSoft/J2ds/commit/501b8993fc41960794572dc481a5f2fe492da349\r\n */\r\n\r\ndefine('j2d.text', [\r\n    'jquery.j2d',\r\n    'j2d.base',\r\n    'j2d.scene'\r\n], function (J2D, BaseNode, Scene) {\r\n    \"use strict\";\r\n\r\n    if (!Scene.prototype.addTextNode) {\r\n        Scene.prototype.addTextNode = function (pos, text, sizePx, color, family, width, colorL) {\r\n            return new TextNode(this.parent, pos, text, sizePx, color, family, width, colorL);\r\n        };\r\n    }\r\n\r\n    var TextNode = function (j2d, pos, text, sizePx, color, family, width, colorL) {\r\n\r\n        BaseNode.call(this, j2d, pos, j2d.vector.vec2df(0, 0));\r\n\r\n        /*Свойства*/\r\n\r\n        this.vAlign = 'top';\r\n        this.hAlign = 'left';\r\n        this.color = color ? color : 'black';\r\n\r\n        this.family = family ? family : 'sans-serif';\r\n        this.sizePx = sizePx ? sizePx : 20;\r\n\r\n        this.box.offset.y = this.j2d.math.toInt(this.sizePx * 0.26);\r\n        this.box.size.y = -this.j2d.math.toInt(this.sizePx * 0.26);\r\n\r\n        this.lineWidth = width ? width : 0;\r\n        this.colorL = colorL ? colorL : 'black';\r\n\r\n        this.font = this.sizePx + 'px ' + this.family;\r\n\r\n        this.fullText = text;\r\n        this.maxWidth = 0;\r\n        this.lines = text.split(\"\\n\");\r\n\r\n        this.j2d.scene.context.font = this.font;\r\n\r\n        for (var i = 0, len = this.lines.length; i < len; i += 1) {\r\n            this.maxWidth = (this.maxWidth < this.j2d.scene.context.measureText(this.lines[i]).width ?\r\n                this.j2d.scene.context.measureText(this.lines[i]).width :\r\n                this.maxWidth);\r\n        }\r\n\r\n        this.size.x = this.maxWidth;\r\n        this.size.y = this.lines.length * this.sizePx;\r\n    };\r\n\r\n    TextNode.prototype = Object.create(BaseNode.prototype);\r\n    TextNode.prototype.constructor = TextNode;\r\n\r\n    TextNode.prototype.setSize = function (sizePx) {\r\n        this.sizePx = sizePx;\r\n        this.font = this.sizePx + 'px ' + this.family;\r\n        this.j2d.scene.context.font = this.font;\r\n\r\n        this.box.offset.y = this.j2d.math.toInt(this.sizePx * 0.26);\r\n        this.box.size.y = -this.j2d.math.toInt(this.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.lines.length; i < len; i += 1) {\r\n            this.maxWidth = (this.maxWidth < this.j2d.scene.context.measureText(this.lines[i]).width ?\r\n                this.j2d.scene.context.measureText(this.lines[i]).width :\r\n                this.maxWidth);\r\n        }\r\n        this.size.x = this.maxWidth;\r\n        this.size.y = this.lines.length * this.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.getSize = function () {\r\n        return this.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.drawSimpleText = function (text, pos, color, colorL) {\r\n        var context = this.layer.context;\r\n        context.fillStyle = color ? color : this.color;\r\n        context.textAlign = this.hAlign;\r\n        context.textBaseline = this.vAlign;\r\n        context.font = this.font;\r\n        context.lineWidth = this.lineWidth;\r\n        context.strokeStyle = colorL ? colorL : this.colorL;\r\n\r\n        var lines = text.split(\"\\n\");\r\n\r\n        pos = pos ? pos : this.pos;\r\n\r\n        for (var i = 0, len = lines.length; i < len; i += 1) {\r\n            if (this.lineWidth) {\r\n                context.strokeText(lines[i], pos.x, pos.y + this.sizePx * i);\r\n            }\r\n            context.fillText(lines[i], pos.x, pos.y + this.sizePx * i);\r\n        }\r\n        context.lineWidth = 0;\r\n        context.strokeStyle = 'black';\r\n    };\r\n\r\n    TextNode.prototype.getText = function () {\r\n        return this.fullText;\r\n    };\r\n\r\n    TextNode.prototype.setText = function (text) {\r\n        this.fullText = text;\r\n        this.maxWidth = 0;\r\n        this.lines = text.split(\"\\n\");\r\n\r\n        this.j2d.scene.context.font = this.font;\r\n\r\n        this.box.offset.y = this.j2d.math.toInt(this.sizePx * 0.26);\r\n        this.box.size.y = -this.j2d.math.toInt(this.sizePx * 0.26);\r\n\r\n        for (var i = 0, len = this.lines.length; i < len; i += 1) {\r\n            this.maxWidth = (this.maxWidth < this.j2d.scene.context.measureText(this.lines[i]).width ?\r\n                this.j2d.scene.context.measureText(this.lines[i]).width :\r\n                this.maxWidth);\r\n        }\r\n        this.size.x = this.maxWidth;\r\n        this.size.y = this.lines.length * this.sizePx;\r\n    };\r\n\r\n    TextNode.prototype.draw = function () {\r\n        var context = this.layer.context;\r\n        if (this.visible && this.isLookScene()) {\r\n            if (this.alpha != 1) {\r\n                var tmpAlpha = context.globalAlpha;\r\n                context.globalAlpha = this.alpha;\r\n            }\r\n\r\n            if (this.angle) {\r\n                context.save();\r\n                context.translate(this.getPosition().x - this.j2d.scene.viewport.x, this.getPosition().y - this.j2d.scene.viewport.y);\r\n                context.rotate(this.j2d.math.rad(this.angle));\r\n                context.translate(-(this.getPosition().x - this.j2d.scene.viewport.x), -(this.getPosition().y - this.j2d.scene.viewport.y));\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            context.textAlign = this.hAlign;\r\n            context.textBaseline = this.vAlign;\r\n            context.font = this.font;\r\n            context.lineWidth = this.lineWidth;\r\n            context.strokeStyle = this.colorL;\r\n\r\n            for (var i = 0, len = this.lines.length; i < len; i += 1) {\r\n                if (this.lineWidth) {\r\n                    context.strokeText(this.lines[i], this.pos.x, this.pos.y + this.sizePx * i);\r\n                }\r\n                context.fillText(this.lines[i], this.pos.x, this.pos.y + this.sizePx * i);\r\n            }\r\n\r\n            context.lineWidth = 0;\r\n            context.strokeStyle = 'black';\r\n\r\n            if (this.angle) {\r\n                context.restore();\r\n            }\r\n\r\n            if (this.alpha != 1) {\r\n                context.globalAlpha = tmpAlpha;\r\n            }\r\n        }\r\n    };\r\n\r\n    return TextNode;\r\n});\r\n"],"sourceRoot":"/source/"}